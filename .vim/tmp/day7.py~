import re
wires = dict()

class int16:
    value = 0x0 # using bytes
    def __init__(self, val=0):
        self.value = val & 0xFFFF

    def band(self, other):
        if not isinstance(other, int16): return
        return int16(self.value & other.value)

    def bor(self, other):
        if not isinstance(other, int16): return
        return int16(self.value | other.value)

    def bnot(self):
        return int16(~self.value)

    def lshift(self, amt):
        return int16(self.value << amt.value)

    def rshift(self, amt):
        return int16(self.value >> amt.value)

    def __repr__(self):
        return str(self.value)

def process(string):
    reg = r"^([a-z0-9]+)? *([A-Z]+)? *([a-z0-9]+)? *[>-]+ *([a-z]+)$"
    m = re.match(reg, string)
    (a1, c, a2, d) = m.groups()
    return (c, a1, a2, d)

def grab(a1, a2):
    if a1 and isinstance(a1, str):
        if a1 in wires:
            a1 = wires[a1]
        elif re.match(r"^(\d+)$", a1):
            a1 = int16(int(a1))
    if a2 and isinstance(a2, str):
        if a2 in wires:
            a2 = wires[a2]
        elif re.match(r"^(\d+)$", a2):
            a2 = int16(int(a2))

    return (a1, a2)

def set_wire(c, a1, a2, d):
    if not c:
        wires[d] = a2
    elif c == "AND":
        wires[d] = a1.band(a2)
    elif c == "OR":
        wires[d] = a1.bor(a2)
    elif c == "NOT":
        wires[d] = a2.bnot()
    elif c == "LSHIFT":
        wires[d] = a1.lshift(a2)
    elif c == "RSHIFT":
        wires[d] = a1.rshift(a2)
    else:
        print "FAIL"

if __name__=="__main__":
    to_handle = []
    with open("day7.txt") as in_file:
        for i in in_file:
            (c, a1, a2, d) = process(i.strip('\n'))
            if not c and not a2 and isinstance(grab(a1, None)[0], int16): 
                set_wire(None, None, grab(a1, None)[0], d)
                continue
            if a1 not in wires or a2 not in wires:
                to_handle.append((c, a1, a2, d))
                continue
            (a1, a2) = grab(a1, a2)
            set_wire(c, a1, a2, d)

    while to_handle:
        changed = False
        to_remove = []
        for i in to_handle:
            a1, a2 = grab(i[1], i[2])
            if not c and not a2 and isinstance(grab(a1, None)[0], int16):
                set_wire(i[0], a2, a1, i[3])
                to_remove.append(i)
            if (isinstance(a1, int16) and isinstance(a2, int16)) or \
                    (i[0] == "NOT" and isinstance(a2, int16)):
                set_wire(i[0], a1, a2, i[3])
                to_remove.append(i)
        for i in to_remove:
            to_handle.remove(i)
            changed = True
        if not changed:
            break
    print to_handle

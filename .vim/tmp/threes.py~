from __future__ import print_function

possibles = [[[10] * 164] * 2] * 45


def dpget(count, carry, curr_sum):
    return possibles[count][carry][curr_sum + 82]


def dpset(count, carry, curr_sum, set_val):
    possibles[count][carry][curr_sum + 82] = set_val;


def next_val(num, count, carry=0, curr_sum=0):
    print(num, count, carry, curr_sum, dpget(count, carry, curr_sum))
    if dpget(count, carry, curr_sum) == 10:
        if num <= 0:
            dpset(count, carry, curr_sum, 3)
        elif num == 1:
            dpset(count, carry, curr_sum, 0 if curr_sum == 0 else 3)
        elif num % 3 == 0:
            if next_val(num / 3, count + 1, carry, curr_sum) == 3:
                dpset(count, carry, curr_sum, 3)
            else:
                dpset(count, carry, curr_sum, 0)
        elif next_val(num / 3, count + 1, 0, curr_sum - num % 3) != 3:
            dpset(count, carry, curr_sum, -(num % 3))
        elif next_val(num / 3 + 1, count + 1, 1, curr_sum + 3 - num % 3) != 3:
            dpset(count, carry, curr_sum, 3 - num % 3)
        else:
            dpset(count, carry, curr_sum, 3)
    return dpget(count, carry, curr_sum)


user = 1
while user > 0:
    possibles = [[[10] * 164] * 2] * 45
    user = input("num: ")
    if next_val(user, 0) == 3:
        print("impossible")
        continue

    curr_sum = 0
    count = 0
    while (user != 1):
        n = next_val(user, count, 0, curr_sum)
        print(user, n)
        user = (user + n) / 3
        count += 1
        curr_sum += n
    print(user)

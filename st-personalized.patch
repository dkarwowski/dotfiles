diff --git a/config.def.h b/config.def.h
index 482901e..9af947d 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,8 +5,8 @@
  *
  * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
  */
-static char *font = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";
-static int borderpx = 2;
+static char *font = "agave:pixelsize=12:antialias=true:autohint=true";
+static int borderpx = 0;
 
 /*
  * What program is execed by st depends of these precedence rules:
@@ -16,7 +16,7 @@ static int borderpx = 2;
  * 4: value of shell in /etc/passwd
  * 5: value of shell in config.h
  */
-static char *shell = "/bin/sh";
+static char *shell = "/bin/zsh";
 char *utmp = NULL;
 char *stty_args = "stty raw pass8 nl -echo -iexten -cstopb 38400";
 
@@ -84,40 +84,85 @@ unsigned int tabspaces = 8;
 
 /* Terminal colors (16 first used in escape sequence) */
 static const char *colorname[] = {
-	/* 8 normal colors */
-	"black",
-	"red3",
-	"green3",
-	"yellow3",
-	"blue2",
-	"magenta3",
-	"cyan3",
-	"gray90",
-
-	/* 8 bright colors */
-	"gray50",
-	"red",
-	"green",
-	"yellow",
-	"#5c5cff",
-	"magenta",
-	"cyan",
-	"white",
+	/* Normal colors */
+	"#031a16", /*  0: Base 00 - Black   */
+	"#3e9688", /*  1: Base 08 - Red     */
+	"#883e96", /*  2: Base 0B - Green   */
+	"#3e4c96", /*  3: Base 0A - Yellow  */
+	"#96883e", /*  4: Base 0D - Blue    */
+	"#4c963e", /*  5: Base 0E - Magenta */
+	"#963e4c", /*  6: Base 0C - Cyan    */
+	"#81b5ac", /*  7: Base 05 - White   */
+
+	/* Bright colors */
+	"#2b685e", /*  8: Base 03 - Bright Black */
+	"#3e9688", /*  9: Base 08 - Red          */
+	"#883e96", /* 10: Base 0B - Green        */
+	"#3e4c96", /* 11: Base 0A - Yellow       */
+	"#96883e", /* 12: Base 0D - Blue         */
+	"#4c963e", /* 13: Base 0E - Magenta      */
+	"#963e4c", /* 14: Base 0C - Cyan         */
+	"#d2e7e4", /* 15: Base 05 - Bright White */
+
+	/* A few more colors */
+
+	"#3e7996", /* 16: Base 09 */
+	"#3e965b", /* 17: Base 0F */
+	"#0b342d", /* 18: Base 01 */
+	"#184e45", /* 19: Base 02 */
+	"#5f9c92", /* 20: Base 04 */
+	"#a7cec8", /* 21: Base 06 */
 
 	[255] = 0,
 
-	/* more colors can be added after 255 to use with DefaultXX */
-	"#cccccc",
-	"#555555",
+	[256] = "#81b5ac", /* default fg: Base 05 */
+	[257] = "#031a16", /* default bg: Base 00 */
 };
 
+static const char *altcolorname[] = {
+	/* Normal colors */
+	"#ffffff", /*  0: Base 00 - Black   */
+	"#cc342b", /*  1: Base 08 - Red     */
+	"#198844", /*  2: Base 0B - Green   */
+	"#fba922", /*  3: Base 0A - Yellow  */
+	"#3971ed", /*  4: Base 0D - Blue    */
+	"#a36ac7", /*  5: Base 0E - Magenta */
+	"#3971ed", /*  6: Base 0C - Cyan    */
+	"#373b41", /*  7: Base 05 - White   */
+
+	/* Bright colors */
+	"#b4b7b4", /*  8: Base 03 - Bright Black */
+	"#cc342b", /*  9: Base 08 - Red          */
+	"#198844", /* 10: Base 0B - Green        */
+	"#fba922", /* 11: Base 0A - Yellow       */
+	"#3971ed", /* 12: Base 0D - Blue         */
+	"#a36ac7", /* 13: Base 0E - Magenta      */
+	"#3971ed", /* 14: Base 0C - Cyan         */
+	"#1d1f21", /* 15: Base 05 - Bright White */
+
+	/* A few more colors */
+
+	"#f96a38", /* 16: Base 09 */
+	"#3971ed", /* 17: Base 0F */
+	"#e0e0e0", /* 18: Base 01 */
+	"#c5c8c6", /* 19: Base 02 */
+	"#969896", /* 20: Base 04 */
+	"#282a2e", /* 21: Base 06 */
+
+	[255] = 0,
+
+	[256] = "#373b41", /* default fg: Base 05 */
+	[257] = "#ffffff", /* default bg: Base 00 */
+};
+
+int usealtcolors = 0;
 
 /*
  * Default colors (colorname index)
  * foreground, background, cursor, reverse cursor
  */
-unsigned int defaultfg = 7;
-unsigned int defaultbg = 0;
+unsigned int defaultfg = 256;
+unsigned int defaultbg = 257;
 static unsigned int defaultcs = 256;
 static unsigned int defaultrcs = 257;
 
@@ -170,14 +215,15 @@ static Shortcut shortcuts[] = {
 	{ ControlMask,          XK_Print,       toggleprinter,  {.i =  0} },
 	{ ShiftMask,            XK_Print,       printscreen,    {.i =  0} },
 	{ XK_ANY_MOD,           XK_Print,       printsel,       {.i =  0} },
-	{ TERMMOD,              XK_Prior,       zoom,           {.f = +1} },
-	{ TERMMOD,              XK_Next,        zoom,           {.f = -1} },
-	{ TERMMOD,              XK_Home,        zoomreset,      {.f =  0} },
+	{ TERMMOD,              XK_F6,          zoom,           {.f = +1} },
+	{ TERMMOD,              XK_F4,          zoom,           {.f = -1} },
+	{ TERMMOD,              XK_F5,          zoomreset,      {.f =  0} },
 	{ TERMMOD,              XK_C,           clipcopy,       {.i =  0} },
 	{ TERMMOD,              XK_V,           clippaste,      {.i =  0} },
 	{ TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
 	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
 	{ TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
+  { XK_ANY_MOD,           XK_F7,          swapcolors,     {.i =  0} },
 };
 
 /*
diff --git a/x.c b/x.c
index 5828a3b..3b8e6a3 100644
--- a/x.c
+++ b/x.c
@@ -53,6 +53,7 @@ static void clipcopy(const Arg *);
 static void clippaste(const Arg *);
 static void numlock(const Arg *);
 static void selpaste(const Arg *);
+static void swapcolors(const Arg *);
 static void zoom(const Arg *);
 static void zoomabs(const Arg *);
 static void zoomreset(const Arg *);
@@ -282,6 +283,14 @@ numlock(const Arg *dummy)
 	win.mode ^= MODE_NUMLOCK;
 }
 
+void
+swapcolors(const Arg *dummy)
+{
+  usealtcolors = !usealtcolors;
+  xloadcols();
+  redraw();
+}
+
 void
 zoom(const Arg *arg)
 {
@@ -706,6 +715,12 @@ sixd_to_16bit(int x)
 	return x == 0 ? 0 : 0x3737 + 0x2828 * x;
 }
 
+const char *
+getcolorname(int i)
+{
+  return (usealtcolors) ? altcolorname[i] : colorname[i];
+}
+
 int
 xloadcolor(int i, const char *name, Color *ncolor)
 {
@@ -724,7 +739,7 @@ xloadcolor(int i, const char *name, Color *ncolor)
 			return XftColorAllocValue(xw.dpy, xw.vis,
 			                          xw.cmap, &color, ncolor);
 		} else
-			name = colorname[i];
+			name = getcolorname(i);
 	}
 
 	return XftColorAllocName(xw.dpy, xw.vis, xw.cmap, name, ncolor);
@@ -741,14 +756,14 @@ xloadcols(void)
 		for (cp = dc.col; cp < &dc.col[dc.collen]; ++cp)
 			XftColorFree(xw.dpy, xw.vis, xw.cmap, cp);
 	} else {
-		dc.collen = MAX(LEN(colorname), 256);
+		dc.collen = MAX(MAX(LEN(colorname), LEN(altcolorname)), 256);
 		dc.col = xmalloc(dc.collen * sizeof(Color));
 	}
 
 	for (i = 0; i < dc.collen; i++)
 		if (!xloadcolor(i, NULL, &dc.col[i])) {
-			if (colorname[i])
-				die("could not allocate color '%s'\n", colorname[i]);
+			if (getcolorname(i))
+				die("could not allocate color '%s'\n", getcolorname(i));
 			else
 				die("could not allocate color %d\n", i);
 		}
@@ -1107,13 +1122,13 @@ xinit(int cols, int rows)
 	cursor = XCreateFontCursor(xw.dpy, mouseshape);
 	XDefineCursor(xw.dpy, xw.win, cursor);
 
-	if (XParseColor(xw.dpy, xw.cmap, colorname[mousefg], &xmousefg) == 0) {
+	if (XParseColor(xw.dpy, xw.cmap, getcolorname(mousefg), &xmousefg) == 0) {
 		xmousefg.red   = 0xffff;
 		xmousefg.green = 0xffff;
 		xmousefg.blue  = 0xffff;
 	}
 
-	if (XParseColor(xw.dpy, xw.cmap, colorname[mousebg], &xmousebg) == 0) {
+	if (XParseColor(xw.dpy, xw.cmap, getcolorname(mousebg), &xmousebg) == 0) {
 		xmousebg.red   = 0x0000;
 		xmousebg.green = 0x0000;
 		xmousebg.blue  = 0x0000;
